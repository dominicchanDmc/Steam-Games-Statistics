(function(){"use strict";var __webpack_modules__={499:function(){eval('\n;// CONCATENATED MODULE: ./src/scripts/buildObj.js\nclass BuildObj {\n  constructor(tag, classArr, name, id, innerHTML, inputType, lableName, value, attribute, options, readonly, onClick, src, rowSpan, colSpan, skipTd) {\n    this.tag = tag;\n    this.classArr = classArr;\n    this.name = name;\n    this.id = id;\n    this.innerHTML = innerHTML;\n    this.lableName = lableName;\n    this.inputType = inputType;\n    this.value = value;\n    this.options = options;\n    this.attribute = attribute;\n    this.readonly = readonly;\n    this.onClick = onClick;\n    this.src = src;\n    this.skipTd = skipTd;\n    // this.rowSpan = rowSpan\n    this.colSpan = colSpan;\n  }\n}\n/* harmony default export */ var scripts_buildObj = (BuildObj);\n;// CONCATENATED MODULE: ./src/scripts/optionObj.js\nclass OptionObj {\n  constructor(displayText, value) {\n    this.displayText = displayText;\n    this.value = value;\n  }\n}\n/* harmony default export */ var scripts_optionObj = (OptionObj);\n;// CONCATENATED MODULE: ./src/scripts/searchObj.js\n\nclass SearchObj {\n  constructor(gameName, releaseFrom, releaseTo, operator, rating, languages, categories, orderBy) {\n    this.gameName = gameName;\n    this.releaseFrom = releaseFrom;\n    this.releaseTo = releaseTo;\n    this.operator = operator;\n    this.rating = rating;\n    this.languages = languages;\n    this.categories = categories;\n    this.orderBy = orderBy;\n  }\n  checkOnlyOneCriteria(source, num) {\n    let count = 0;\n    if (source === "search") {\n      if (this.gameName) count++;\n      if (this.releaseFrom) count++;\n      if (this.releaseTo) count++;\n      if (this.operator || this.rating) count++;\n      if (this.languages) count++;\n      if (this.categories) count++;\n    } else if (source === "compare") {\n      if (this.owners) count++;\n      if (this.release_date) count++;\n      if (this.price) count++;\n      if (this.supported_languages) count++;\n      if (this.categories) count++;\n      if (this.genres) count++;\n      if (this.tags) count++;\n      if (this.average_forever) count++;\n      if (this.total_negative) count++;\n      if (this.total_positive) count++;\n      if (this.review_score) count++;\n      if (this.rating) count++;\n    } else if (source === "statist") {\n      if (this.radioBtn) count++;\n    }\n    return count === num;\n  }\n  getCheckedPropertiesArray(source) {\n    const checkedProperties = [];\n    for (const property in this) {\n      if (this[property]) {\n        checkedProperties.push(property);\n      }\n    }\n    let filter_checkedProperties;\n    if (source === "compare") {\n      filter_checkedProperties = checkedProperties.filter(item => {\n        if (item === "gameCompare1" || item === "gameCompare2" || item === "radioBtn" || item === "source") return false;else return true;\n      });\n    }\n    return filter_checkedProperties;\n  }\n  getSelectedRadio() {\n    return stringCriteriaTran(this.radioBtn);\n  }\n  areOnlyFiveFieldsChecked() {\n    const requiredFields = ["rating", "total_negative", "total_positive", "review_score", "average_forever"];\n    const checkedFields = this.getCheckedPropertiesArray("compare");\n    return checkedFields.every(field => requiredFields.includes(field));\n  }\n}\n/* harmony default export */ var scripts_searchObj = (SearchObj);\n;// CONCATENATED MODULE: ./src/scripts/chartObj.js\nclass chartObj {}\n/* harmony default export */ var scripts_chartObj = (chartObj);\n;// CONCATENATED MODULE: ./src/scripts/helper.js\n\n\n\n\nfunction optionObjHashHelper(operatorHash, type) {\n  let optionObjList = [];\n  if (type != "orderBy") optionObjList.push(new scripts_optionObj("", ""));\n  for (const key in operatorHash) {\n    let optionObj = new scripts_optionObj();\n    optionObj.value = key;\n    optionObj.displayText = operatorHash[key];\n    optionObjList.push(optionObj);\n  }\n  return optionObjList;\n}\nfunction optionObjArrHelper(valueList, keyList) {\n  let optionObjList = [];\n  optionObjList.push(new scripts_optionObj("", ""));\n  for (let i = 0; i < valueList.length; i++) {\n    let optionObj = new scripts_optionObj();\n    optionObj.value = keyList[i];\n    optionObj.displayText = valueList[i];\n    optionObjList.push(optionObj);\n  }\n  return optionObjList;\n}\nfunction buildObjHelper(createHash) {\n  let buildObj = new scripts_buildObj();\n  for (const key in createHash) {\n    buildObj[key] = createHash[key];\n  }\n  return buildObj;\n}\nfunction searchObjArrHelper(source) {\n  //source\n  let gameName = document.getElementById("gameName");\n  let releaseFrom = document.getElementById("releaseFrom");\n  let releaseTo = document.getElementById("releaseTo");\n  let operator = document.getElementById("operator");\n  let rating = document.getElementById("rating");\n  let languages = document.getElementById("languages");\n  let categories = document.getElementById("categories");\n  let orderBy = document.getElementById("orderBy");\n  const radioBtndlcY = document.getElementById(\'dlcY\');\n  const radioBtndlcN = document.getElementById(\'dlcN\');\n\n  //compare\n  const gameCompare1 = document.getElementById(\'gameCompare1\');\n  const gameCompare2 = document.getElementById(\'gameCompare2\');\n  const radioBtnTb = document.getElementById(\'tb\');\n  const radioBtnChart = document.getElementById(\'ch\');\n  const ownersChb = document.getElementById(\'ownersChb\');\n  const releaseDateChb = document.getElementById(\'releaseDateChb\');\n  const priceChb = document.getElementById(\'priceChb\');\n  const supportedLanguagesChb = document.getElementById(\'supportedLanguagesChb\');\n  const categoriesChb = document.getElementById(\'categoriesChb\');\n  const genresChb = document.getElementById(\'genresChb\');\n  const tagsChb = document.getElementById(\'tagsChb\');\n  const averageForeverChb = document.getElementById(\'averageForeverChb\');\n  const totalNegativeChb = document.getElementById(\'totalNegativeChb\');\n  const totalPositiveChb = document.getElementById(\'totalPositiveChb\');\n  const reviewScoreChb = document.getElementById(\'reviewScoreChb\');\n  const ratingChb = document.getElementById(\'ratingChb\');\n\n  //statist\n  const filterReleaseFrom = document.getElementById("filterReleaseFrom");\n  const filterReleaseTo = document.getElementById("filterReleaseTo");\n  const filterOperator = document.getElementById("filterOperator");\n  const filterRating = document.getElementById("filterRating");\n  const statistSupportedLanguagesRad = document.getElementById(\'statistSupportedLanguagesRad\');\n  const statistCategoriesRad = document.getElementById(\'statistCategoriesRad\');\n  const statistGenresRad = document.getElementById(\'statistGenresRad\');\n  const statistTagsRad = document.getElementById(\'statistTagsRad\');\n  const radioBtndlcYSt = document.getElementById(\'dlcYSt\');\n  const radioBtndlcNSt = document.getElementById(\'dlcNSt\');\n  let searchObj = new scripts_searchObj();\n  searchObj.source = source;\n  if (source === "search") {\n    searchObj.gameName = gameName.value;\n    searchObj.releaseFrom = releaseFrom.value;\n    searchObj.releaseTo = releaseTo.value;\n    searchObj.operator = operator.value;\n    searchObj.rating = rating.value;\n    searchObj.languages = languages.value;\n    searchObj.categories = categories.value;\n    searchObj.orderBy = orderBy.value;\n    if (radioBtndlcY.checked) searchObj.radioBtnDlc = radioBtndlcY.value;else searchObj.radioBtnDlc = radioBtndlcN.value;\n  } else if (source === "compare") {\n    searchObj.gameCompare1 = gameCompare1.value;\n    searchObj.gameCompare2 = gameCompare2.value;\n    if (radioBtnChart.checked) searchObj.radioBtn = radioBtnChart.value;else searchObj.radioBtn = radioBtnTb.value;\n    searchObj.release_date = releaseDateChb.checked;\n    searchObj.owners = ownersChb.checked;\n    searchObj.rating = ratingChb.checked;\n    searchObj.price = priceChb.checked;\n    searchObj.total_positive = totalPositiveChb.checked;\n    searchObj.total_negative = totalNegativeChb.checked;\n    searchObj.review_score = reviewScoreChb.checked;\n    searchObj.average_forever = averageForeverChb.checked;\n    searchObj.supported_languages = supportedLanguagesChb.checked;\n    searchObj.categories = categoriesChb.checked;\n    searchObj.tags = tagsChb.checked;\n    searchObj.genres = genresChb.checked;\n  } else if (source === "statist") {\n    searchObj.filterReleaseFrom = filterReleaseFrom.value;\n    searchObj.filterReleaseTo = filterReleaseTo.value;\n    searchObj.filterOperator = filterOperator.value;\n    searchObj.filterRating = filterRating.value;\n    if (statistSupportedLanguagesRad.checked) searchObj.radioBtn = statistSupportedLanguagesRad.value;else if (statistCategoriesRad.checked) searchObj.radioBtn = statistCategoriesRad.value;else if (statistGenresRad.checked) searchObj.radioBtn = statistGenresRad.value;else if (statistTagsRad.checked) searchObj.radioBtn = statistTagsRad.value;\n    if (radioBtndlcYSt.checked) searchObj.radioBtnDlc = radioBtndlcYSt.value;else searchObj.radioBtnDlc = radioBtndlcNSt.value;\n  }\n  return searchObj;\n}\nfunction hashHelper(keyList, valueList) {\n  let hash = {};\n  for (let i = 0; i < keyList.length; i++) {\n    hash[keyList[i]] = valueList[i];\n  }\n  return hash;\n}\nfunction chartObjHelper(createHash) {\n  let chartObj = new scripts_chartObj();\n  for (const key in createHash) {\n    chartObj[key] = createHash[key];\n  }\n  return chartObj;\n}\nfunction stringCut(string) {\n  return string.replace(/\\[|\\]|\'/g, "");\n}\nfunction stringTran(string) {\n  switch (string) {\n    case "average_forever":\n      return "User Average Forever :";\n    case "release_date":\n      return "Release Date :";\n    case "review_score":\n      return "Review Score :";\n    case "supported_languages":\n      return "Supported Languages :";\n    case "total_negative":\n      return "Total Negative :";\n    case "total_positive":\n      return "Total Positive :";\n    case "price":\n      return "Price (USD) :";\n    default:\n      return string.charAt(0).toUpperCase() + string.slice(1) + " :";\n  }\n}\nfunction stringCriteriaTran(string) {\n  switch (string) {\n    case "supportedLanguages":\n      return "supported_languages";\n    case "categories":\n      return "categories";\n    case "tags":\n      return "tags";\n    case "genres":\n      return "genres";\n  }\n}\nfunction rebuildHash(originalHash) {\n  const rebuiltHash = {};\n  Object.keys(originalHash).forEach(key => {\n    const cleanedKeyTemp = key.trim().toLowerCase().replace(/"/g, \'\');\n    const cleanedKey = cleanedKeyTemp.charAt(0).toUpperCase() + cleanedKeyTemp.slice(1);\n    if (rebuiltHash[cleanedKey]) {\n      rebuiltHash[cleanedKey] += originalHash[key];\n    } else {\n      rebuiltHash[cleanedKey] = originalHash[key];\n    }\n  });\n  return rebuiltHash;\n}\nfunction openModal(message) {\n  const modal = document.getElementById("myModal");\n  const modalMessageElement = document.getElementById("modalMessage");\n  modalMessageElement.textContent = message;\n  modal.style.display = "block";\n  const closeBtn = document.getElementById("closeBtn");\n  closeBtn.addEventListener("click", () => {\n    modal.style.display = "none";\n  });\n\n  // Close the modal when the user clicks outside of it\n  window.addEventListener("click", event => {\n    if (event.target === modal) {\n      modal.style.display = "none";\n    }\n  });\n}\nfunction dataTranArray(dataString) {\n  let finalArr = [];\n  if (dataString) {\n    let dataStringCut = stringCut(dataString);\n    if (dataStringCut) {\n      let stringSpilt = dataStringCut.split(\',\');\n      if (Array.isArray(stringSpilt)) return stringSpilt;else finalArr.push(stringSpilt);\n    }\n    return finalArr;\n  }\n}\n;// CONCATENATED MODULE: ./src/scripts/builder.js\n\n\nfunction buildElement(buildObj) {\n  let newElement = document.createElement(buildObj.tag);\n  if (buildObj.tag === "select") {\n    buildObj.options.forEach(options => {\n      let optionElement = document.createElement("option");\n      optionElement.value = options.value;\n      optionElement.innerHTML = options.displayText;\n      newElement.appendChild(optionElement);\n    });\n  } else if (buildObj.tag === "input") {\n    if (buildObj.inputType != "text") newElement.type = buildObj.inputType;\n    if (buildObj.inputType === "radio" && buildObj.attributes) {\n      for (const [key, value] of Object.entries(buildObj.attributes)) {\n        newElement.setAttribute(key, value);\n      }\n    }\n  } else if (buildObj.tag === \'label\' && buildObj.lableName) newElement.setAttribute(\'for\', buildObj.lableName);else if (buildObj.tag === \'button\' && buildObj.attribute) {\n    newElement.setAttribute(`data-name`, buildObj.attribute);\n  } else if (buildObj.tag === \'img\' && buildObj.src) {\n    newElement.src = buildObj.src;\n  }\n  if (Array.isArray(buildObj.classArr)) {\n    buildObj.classArr.forEach(c => {\n      newElement.classList.add(c);\n    });\n  } else if (buildObj.classArr) newElement.classList.add(buildObj.classArr);\n  if (buildObj.value) newElement.value = buildObj.value;\n  if (buildObj.name) newElement.innerHTML = buildObj.name;else if (buildObj.innerHTML) newElement.innerHTML = buildObj.innerHTML;\n  if (buildObj.id) newElement.id = buildObj.id;\n  if (buildObj.readonly) newElement.readOnly = true;\n  if (buildObj.onClick) {\n    newElement.onclick = buildObj.onClick;\n  }\n  return newElement;\n}\nfunction createTableTr(trCreateObjArr) {\n  let masterTr = buildElement(new scripts_buildObj("tr"));\n  trCreateObjArr.forEach(tdCreateObj => {\n    if (tdCreateObj.trClass) {\n      if (tdCreateObj.trClass[0] === "filterTitle") masterTr.classList.add(tdCreateObj.trClass);\n    }\n    if (Array.isArray(tdCreateObj)) {\n      //for rating only\n      if (tdCreateObj[0].id === "operator" || tdCreateObj[0].id === "filterOperator") {\n        let rating = createTableTd(tdCreateObj[0]);\n        let numberInputObjArr = createTableTd(tdCreateObj[1]);\n        let ratingSelect = rating[0].children[0];\n        let numberInputTd = numberInputObjArr[0];\n        if (tdCreateObj[0].id === "filterOperator") numberInputTd.colSpan = 2;\n        numberInputTd.insertBefore(ratingSelect, numberInputTd.lastElementChild);\n        masterTr.appendChild(numberInputObjArr[0]);\n      } else if (tdCreateObj[0].id === "searchBtn" || tdCreateObj[0].id === "compareBtn" || tdCreateObj[0].id === "statistBtn") {\n        // for searchBtn,compareBtn,statistBtn\n        let searchBtn = buildElement(tdCreateObj[0]);\n        let searchBtnIcon = createTableTd(tdCreateObj[1]);\n        searchBtn.appendChild(searchBtnIcon[0]);\n        let newTd = buildElement(new scripts_buildObj("td"));\n        newTd.colSpan = "6";\n        if (tdCreateObj[0].id === "statistBtn") newTd.classList.add("statistBtnTd");\n        newTd.appendChild(searchBtn);\n        masterTr.appendChild(newTd);\n      } else if (tdCreateObj[0].id === "tb" || tdCreateObj[0].id === "dlcY" || tdCreateObj[0].id === "dlcYSt") {\n        //for compareRadio / searchRadio /statistRadio\n        let newTd = buildElement(new scripts_buildObj("td"));\n        let labelObj, labelTbObj, labelChObj;\n        if (tdCreateObj[0].id === "tb") {\n          labelObj = buildElement(buildObjHelper({\n            tag: "label",\n            innerHTML: "Display By:"\n          }));\n          labelTbObj = buildElement(buildObjHelper({\n            tag: "label",\n            innerHTML: "Table",\n            lableName: "tb"\n          }));\n          labelChObj = buildElement(buildObjHelper({\n            tag: "label",\n            innerHTML: "Chart",\n            lableName: "ch"\n          }));\n          newTd.colSpan = 2;\n        } else if (tdCreateObj[0].id === "dlcY") {\n          labelObj = buildElement(buildObjHelper({\n            tag: "label",\n            innerHTML: "Include DLC:"\n          }));\n          labelTbObj = buildElement(buildObjHelper({\n            tag: "label",\n            innerHTML: "Yes",\n            lableName: "dlcY"\n          }));\n          labelChObj = buildElement(buildObjHelper({\n            tag: "label",\n            innerHTML: "No",\n            lableName: "dlcN"\n          }));\n        } else if (tdCreateObj[0].id === "dlcYSt") {\n          labelObj = buildElement(buildObjHelper({\n            tag: "label",\n            innerHTML: "Include DLC:"\n          }));\n          labelTbObj = buildElement(buildObjHelper({\n            tag: "label",\n            innerHTML: "Yes",\n            lableName: "dlcYSt"\n          }));\n          labelChObj = buildElement(buildObjHelper({\n            tag: "label",\n            innerHTML: "No",\n            lableName: "dlcNSt"\n          }));\n        }\n        newTd.appendChild(labelObj);\n        let radioBtn = buildElement(tdCreateObj[0]);\n        let radioBtn2 = buildElement(tdCreateObj[1]);\n        newTd.appendChild(labelTbObj);\n        newTd.appendChild(radioBtn);\n        newTd.appendChild(labelChObj);\n        newTd.appendChild(radioBtn2);\n        masterTr.appendChild(newTd);\n      } else {\n        let innerTd = createTableTd(tdCreateObj);\n        if (Array.isArray(innerTd)) {\n          innerTd.forEach(td => {\n            masterTr.appendChild(td);\n          });\n        } else masterTr.appendChild(innerTd);\n      }\n    } else {\n      let innerTd = createTableTd(tdCreateObj);\n      if (Array.isArray(innerTd)) {\n        innerTd.forEach(td => {\n          masterTr.appendChild(td);\n        });\n      } else masterTr.appendChild(innerTd);\n    }\n  });\n  return masterTr;\n}\nfunction createTableTd(tdCreateObjArr) {\n  let returnArr = [];\n  if (Array.isArray(tdCreateObjArr)) {\n    tdCreateObjArr.forEach(tdCreateObj => {\n      returnArr = returnArr.concat(createTableTdInner(tdCreateObj));\n    });\n  } else returnArr = createTableTdInner(tdCreateObjArr);\n  return returnArr;\n}\nfunction createTableTdInner(tdCreateObj) {\n  let returnArr = [];\n  let labelmasterTd = buildElement(new scripts_buildObj("td"));\n  if (tdCreateObj.tdClass) labelmasterTd.classList.add(tdCreateObj.tdClass);\n  if (tdCreateObj.colSpan) labelmasterTd.colSpan = tdCreateObj.colSpan;\n  if (tdCreateObj.lableName) {\n    let labelObjClass = [];\n    let lableId = null;\n    if (tdCreateObj.lableClass) labelObjClass = tdCreateObj.lableClass;\n    if (tdCreateObj.lableId) lableId = tdCreateObj.lableId;\n    let labelObj = new scripts_buildObj("label", labelObjClass, null, lableId, tdCreateObj.lableName, tdCreateObj.id);\n    let labelTd = buildElement(labelObj);\n    if (tdCreateObj.skipTd) returnArr.push(labelTd);else labelmasterTd.appendChild(labelTd);\n  }\n  let innterTd = buildElement(tdCreateObj);\n  if (tdCreateObj.skipTd) returnArr.push(innterTd);else labelmasterTd.appendChild(innterTd);\n  if (!tdCreateObj.skipTd) returnArr.push(labelmasterTd);\n  return returnArr;\n}\n;// CONCATENATED MODULE: ./src/scripts/chart.js\n\nfunction buildCompareChart(chartObj, i) {\n  const colorList = ["skyblue", "lavenderblush", "wheat", "powderblue", "silver"];\n  new Chart(chartObj.ctx, {\n    type: chartObj.type,\n    data: {\n      labels: [chartObj.game1Data.name, chartObj.game2Data.name],\n      datasets: [{\n        label: stringTran(chartObj.compareCol),\n        data: [chartObj.game1Data[chartObj.compareCol], chartObj.game2Data[chartObj.compareCol]],\n        borderWidth: 1,\n        backgroundColor: colorList[i]\n      }]\n    },\n    options: {\n      plugins: {\n        legend: {\n          labels: {\n            font: {\n              size: 18\n            },\n            color: \'yellow\'\n          }\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: chartObj.beginAtZero,\n          grid: {\n            zeroLineColor: "yellow",\n            color: "white"\n          },\n          border: {\n            color: "yellow"\n          },\n          ticks: {\n            color: "yellow",\n            font: {\n              size: 18\n            }\n          }\n        },\n        x: {\n          drawTicks: true,\n          beginAtZero: true,\n          grid: {\n            zeroLineColor: "yellow",\n            color: "white"\n          },\n          border: {\n            color: "yellow"\n          },\n          ticks: {\n            color: "yellow",\n            font: {\n              size: 18\n            }\n          },\n          mirror: true\n        }\n      }\n    }\n  });\n}\nfunction buildStatistChart(chartObj) {\n  let keyList = [];\n  let valueList = [];\n  Object.keys(chartObj.dataHash).forEach(key => {\n    keyList.push(key);\n    valueList.push(chartObj.dataHash[key]);\n  });\n  const total = valueList.reduce((acc, curr) => acc + curr, 0);\n  const threshold = total * 0.001;\n  let othersTotal = 0;\n  const filteredValueList = valueList.filter((value, index) => {\n    if (value < threshold) {\n      othersTotal += value;\n      keyList.splice(index, 1);\n      return false;\n    }\n    return true;\n  });\n  if (othersTotal > 0) {\n    keyList.push("Others");\n    filteredValueList.push(othersTotal);\n  }\n  const data = {\n    labels: keyList,\n    datasets: [{\n      label: chartObj.displayLable,\n      data: filteredValueList,\n      hoverOffset: 4,\n      // backgroundColor: chartObj.backgroundColor || \'rgba(75, 192, 192, 0.2)\',\n      // borderColor: chartObj.borderColor || \'rgba(75, 192, 192, 1)\',\n      borderWidth: 1\n    }]\n  };\n  const config = {\n    type: chartObj.type,\n    data: data,\n    options: {\n      plugins: {\n        title: {\n          display: true,\n          text: showTittle(chartObj, filteredValueList.length),\n          font: {\n            size: 30,\n            weight: \'bold\'\n          },\n          color: "white"\n        },\n        tooltip: {\n          callbacks: {\n            label: context => {\n              const dataIndex = context.dataIndex;\n              const dataset = context.dataset;\n              const currentValue = dataset.data[dataIndex];\n              const percentage = (currentValue / total * 100).toFixed(2);\n              return `${currentValue} (${percentage}%)`;\n            }\n          }\n        },\n        legend: {\n          labels: {\n            font: {\n              size: 15\n            },\n            color: \'yellow\'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: chartObj.beginAtZero,\n            grid: {\n              zeroLineColor: "yellow",\n              color: "white"\n            },\n            border: {\n              color: "yellow"\n            },\n            ticks: {\n              color: "yellow",\n              font: {\n                size: 18\n              }\n            }\n          },\n          x: {\n            drawTicks: true,\n            beginAtZero: true,\n            grid: {\n              zeroLineColor: "yellow",\n              color: "white"\n            },\n            border: {\n              color: "yellow"\n            },\n            ticks: {\n              color: "yellow",\n              font: {\n                size: 18\n              }\n            },\n            mirror: true\n          }\n        }\n      },\n      responsive: true,\n      maintainAspectRatio: false\n    }\n  };\n  new Chart(chartObj.ctx, config);\n}\nfunction showTittle(chartObj, valueLength) {\n  if (valueLength === 0) return "No result";else return charTittleTran(chartObj.displayLable);\n}\nfunction charTittleTran(string) {\n  switch (string) {\n    case "supported_languages":\n      return "Supported Languages";\n    case "categories":\n      return "Categories";\n    case "tags":\n      return "Tags";\n    case "genres":\n      return "Genres";\n  }\n}\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\nasync function getData() {\n  const request = await fetch("./data/steamData-after2019.json");\n  const respone = await request.json();\n  const array = Object.values(respone);\n  const newObj = array.reduce((obj, item) => Object.assign(obj, {\n    [item.name]: item\n  }), {});\n  return newObj;\n}\ndocument.addEventListener("DOMContentLoaded", async () => {\n  //pullDownList \n  const operatorList = optionObjHashHelper({\n    greaterEqual: "Greater Equal (>=)",\n    greater: "Greater (>)",\n    samller: "Samller (<)"\n  });\n  const languagesValue = ["English", "French", "German", "Italian", "Japanese", "Korean", "Russian", "Simplified Chinese", "Traditional Chinese"];\n  const languagesKey = ["Eng", "Fre", "Ger", "Ita", "Jap", "Koean", "Rus", "SC", "TC"];\n  const languagesList = optionObjArrHelper(languagesValue, languagesKey);\n  const categoriesValue = ["Co-op", "Full controller support", "LAN Co-op", "MMO", "Multi-player", "Online Co-op", "Online PvP", "Partial Controller Support", "PvP", "Shared/Split Screen", "Single-player", "Steam Achievements"];\n  const categoriesKey = ["Coo", "FCS", "LCoo", "MMO", "Mp", "OCoo", "OPvP", "PCS", "PvP", "SSS", "SP", "SA"];\n  const categoriesList = optionObjArrHelper(categoriesValue, categoriesKey);\n  const orderList = optionObjHashHelper({\n    ratingDesc: "Rating Descending",\n    ratingAsc: "Rating Ascending",\n    nameDesc: "Name Descending",\n    nameAsc: "Name Ascending",\n    releaseDateDesc: "Release Date Descending",\n    releaseDateAsc: "Release Date Ascending"\n  }, "orderBy");\n\n  //frontPage\n  const searchBtnStrBuildObj = new scripts_buildObj("", ["fa-solid", "fa-magnifying-glass"], "Search", "searchPage", "Search and display detail information by different criteria");\n  const compareBtnStrBuildObj = new scripts_buildObj("", ["fa-solid", "fa-table"], "Compare", "comparePage", "Compare item between 2 games with table or chart");\n  const statisticsBtnStrBuildObj = new scripts_buildObj("", ["fa-solid", "fa-chart-simple"], "Statistics", "statistPage", "Data statistics for the period");\n  const homeBtnStrBuildObj = new scripts_buildObj("", ["fa-solid", "fa-house"], "Home", "frontPage");\n  //searchCriteria\n  const nameInputObj = new scripts_buildObj("input", null, null, "gameName", null, "text", "Name:");\n  const releaseFromInputObj = new scripts_buildObj("input", null, null, "releaseFrom", null, "month", "Release From:");\n  const releaseToInputObj = new scripts_buildObj("input", null, null, "releaseTo", null, "month", "Release To:");\n  const ratingInputObj = buildObjHelper({\n    tag: "select",\n    id: "operator",\n    options: operatorList\n  });\n  const numberInputObj = buildObjHelper({\n    tag: "input",\n    name: "rating",\n    id: "rating",\n    inputType: "number",\n    attribute: "0.01",\n    lableName: "Rating:"\n  });\n  const languagesInputObj = buildObjHelper({\n    tag: "select",\n    id: "languages",\n    options: languagesList,\n    lableName: "Supported languages:"\n  });\n  const categoriesInputObj = buildObjHelper({\n    tag: "select",\n    id: "categories",\n    options: categoriesList,\n    lableName: "Categories:"\n  });\n  const orderInputObj = buildObjHelper({\n    tag: "select",\n    id: "orderBy",\n    options: orderList,\n    lableName: "Order by:"\n  });\n  const searchBtnObj = buildObjHelper({\n    tag: "button",\n    classArr: ["searchCriteriaBtn"],\n    id: "searchBtn",\n    innerHTML: "Search"\n  });\n  const searchBtnIconObj = buildObjHelper({\n    tag: "i",\n    classArr: ["fa-solid", "fa-magnifying-glass"],\n    skipTd: true\n  });\n  const radioBtnDLCYObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    id: "dlcY",\n    value: "Yes",\n    attributes: {\n      name: "includeDLC",\n      value: "Yes",\n      id: "dlcY",\n      checked: "checked"\n    }\n  });\n  const radioBtnDLCNObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    id: "dlcN",\n    value: "No",\n    attributes: {\n      name: "includeDLC",\n      value: "No",\n      id: "dlcN"\n    }\n  });\n  const searchCriteriaCreateArr = [[nameInputObj, releaseFromInputObj, releaseToInputObj], [[ratingInputObj, numberInputObj], languagesInputObj, categoriesInputObj], [[radioBtnDLCYObj, radioBtnDLCNObj], orderInputObj, [searchBtnObj, searchBtnIconObj]]];\n  //searchResultList\n  const headerTrNameObj = buildObjHelper({\n    tag: "input",\n    inputType: "text",\n    classArr: ["searchListCol-150"],\n    value: "Name",\n    readonly: "true"\n  });\n  const headerTrReleaseDateObj = buildObjHelper({\n    tag: "input",\n    classArr: ["searchListCol-80"],\n    inputType: "text",\n    value: "Release Date",\n    readonly: "true"\n  });\n  const headerTrRatingObj = buildObjHelper({\n    tag: "input",\n    classArr: ["searchListCol-80"],\n    inputType: "text",\n    value: "Rating",\n    readonly: "true"\n  });\n  const headerTrLanguagesObj = buildObjHelper({\n    tag: "input",\n    inputType: "text",\n    value: "Languages",\n    classArr: ["searchListCol-150"],\n    readonly: "true"\n  });\n  const headerTrCategoriesObj = buildObjHelper({\n    tag: "input",\n    inputType: "text",\n    classArr: ["searchListCol-150"],\n    value: "Categories",\n    readonly: "true"\n  });\n  const headerTrSelectBtnObj = buildObjHelper({\n    tag: "button",\n    classArr: ["searchResultBtn"],\n    innerHTML: "Select"\n  });\n  const headerTrAddToCompareBtnObj = buildObjHelper({\n    tag: "button",\n    classArr: ["searchResultBtn"],\n    innerHTML: "Compare"\n  });\n  const headerTrCreateArr = [headerTrNameObj, headerTrRatingObj, headerTrReleaseDateObj, headerTrLanguagesObj, headerTrCategoriesObj];\n  //compareCriteria\n  const compareNameObj = buildObjHelper({\n    tag: "input",\n    id: "gameCompare1",\n    inputType: "text",\n    classArr: ["CompareCol-300"],\n    lableName: "Game 1:",\n    readonly: "true",\n    colSpan: 2\n  });\n  const compareName2Obj = buildObjHelper({\n    tag: "input",\n    id: "gameCompare2",\n    inputType: "text",\n    classArr: ["CompareCol-300"],\n    lableName: "Game 2:",\n    readonly: "true",\n    colSpan: 2\n  });\n  const radioBtnTbObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    id: "tb",\n    value: "Table",\n    attributes: {\n      name: "displayBy",\n      value: "Table",\n      id: "tb",\n      checked: "checked"\n    }\n  });\n  const radioBtnChartObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    id: "ch",\n    value: "Chart",\n    attributes: {\n      name: "displayBy",\n      value: "ch",\n      id: "ch"\n    }\n  });\n  const compareBtnObj = buildObjHelper({\n    tag: "button",\n    classArr: ["compareCriteriaBtn"],\n    id: "compareBtn",\n    innerHTML: "Compare"\n  });\n  const compareBtnIconObj = buildObjHelper({\n    tag: "i",\n    classArr: ["fa-solid", "fa-table"],\n    skipTd: true\n  });\n  const ownersChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    id: "ownersChb",\n    classArr: ["compareChbClass"],\n    value: "owners",\n    lableName: "Owners",\n    skipTd: false,\n    attributes: {\n      value: "owners",\n      id: "ownersChb"\n    }\n  });\n  const releaseDateChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    id: "releaseDateChb",\n    classArr: ["compareChbClass"],\n    value: "releaseDate",\n    lableName: "Release Date",\n    skipTd: false,\n    attributes: {\n      value: "releaseDate",\n      id: "releaseDateChb"\n    }\n  });\n  const priceChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    id: "priceChb",\n    classArr: ["compareChbClass"],\n    value: "price",\n    lableName: "Price",\n    skipTd: false,\n    attributes: {\n      value: "price",\n      id: "priceChb"\n    }\n  });\n  const supportedLanguagesChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    id: "supportedLanguagesChb",\n    classArr: ["compareChbClass"],\n    value: "supportedLanguages",\n    lableName: "Supported Languages",\n    skipTd: false,\n    attributes: {\n      value: "supportedLanguages",\n      id: "supportedLanguages"\n    }\n  });\n  const categoriesChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    id: "categoriesChb",\n    classArr: ["compareChbClass"],\n    value: "categories",\n    lableName: "Categories",\n    skipTd: false,\n    attributes: {\n      value: "categories",\n      id: "categoriesChb"\n    }\n  });\n  const genresChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    id: "genresChb",\n    classArr: ["compareChbClass"],\n    value: "genres",\n    lableName: "Genres",\n    skipTd: false,\n    attributes: {\n      value: "genres",\n      id: "genres"\n    }\n  });\n  const tagsChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    id: "tagsChb",\n    classArr: ["compareChbClass"],\n    value: "tags",\n    lableName: "Tags",\n    skipTd: false,\n    attributes: {\n      value: "tags",\n      id: "tags"\n    }\n  });\n  const averageForeverChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    classArr: ["compareChbClass"],\n    id: "averageForeverChb",\n    value: "averageForever",\n    lableName: "User Average Forever (C)",\n    skipTd: false,\n    attributes: {\n      value: "averageForeverChbObj",\n      id: "averageForeverChbObj"\n    }\n  });\n  const totalNegativeChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    classArr: ["compareChbClass"],\n    id: "totalNegativeChb",\n    value: "totalNegative",\n    lableName: "Total Negative (C)",\n    skipTd: false,\n    attributes: {\n      value: "totalNegative",\n      id: "totalNegativeChb"\n    }\n  });\n  const totalPositiveChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    classArr: ["compareChbClass"],\n    id: "totalPositiveChb",\n    value: "totalPositive",\n    lableName: "Total Positive (C)",\n    skipTd: false,\n    attributes: {\n      value: "totalPositive",\n      id: "totalPositive"\n    }\n  });\n  const reviewScoreChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    classArr: ["compareChbClass"],\n    id: "reviewScoreChb",\n    value: "reviewScore",\n    lableName: "Review Score (C)",\n    skipTd: false,\n    attributes: {\n      value: "reviewScore",\n      id: "reviewScore"\n    }\n  });\n  const ratingChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    classArr: ["compareChbClass"],\n    id: "ratingChb",\n    value: "rating",\n    lableName: "Rating (C)",\n    skipTd: false,\n    attributes: {\n      value: "ratingChbObj",\n      id: "ratingChbObj"\n    }\n  });\n  const masterChbObj = buildObjHelper({\n    tag: "input",\n    inputType: "checkbox",\n    id: "compareMasterCheckbox",\n    lableName: "Check All",\n    lableId: "compareMasterCheckboxLabel",\n    attributes: {\n      id: "compareMasterCheckbox"\n    }\n  });\n  const compareCriteriaCreateArr = [[releaseDateChbObj, ownersChbObj, ratingChbObj, priceChbObj], [totalPositiveChbObj, totalNegativeChbObj, reviewScoreChbObj, averageForeverChbObj], [supportedLanguagesChbObj, categoriesChbObj, tagsChbObj, genresChbObj], [[radioBtnTbObj, radioBtnChartObj], masterChbObj, [compareBtnObj, compareBtnIconObj]]];\n  //statistFilter\n  const filterTitleObj = buildObjHelper({\n    tag: "label",\n    classArr: ["filterLabel"],\n    innerHTML: "Data Filter",\n    readonly: "true",\n    colSpan: 4,\n    trClass: ["filterTitle"]\n  });\n  const filterReleaseFromObj = buildObjHelper({\n    tag: "input",\n    id: "filterReleaseFrom",\n    inputType: "month",\n    lableName: "Release From:"\n  });\n  const filterReleaseToObj = buildObjHelper({\n    tag: "input",\n    id: "filterReleaseTo",\n    inputType: "month",\n    lableName: "Release To:"\n  });\n  const filterRatingObj = buildObjHelper({\n    tag: "select",\n    id: "filterOperator",\n    options: operatorList\n  });\n  const filterNumberObj = buildObjHelper({\n    tag: "input",\n    name: "rating",\n    id: "filterRating",\n    inputType: "number",\n    attribute: "0.01",\n    lableName: "Rating:"\n  });\n  const criteriaTitleObj = buildObjHelper({\n    tag: "label",\n    classArr: ["filterLabel"],\n    innerHTML: "Statistics Criteria",\n    readonly: "true",\n    colSpan: 4,\n    trClass: ["filterTitle"]\n  });\n  //statistCriteria\n  const statistSupportedLanguagesRadObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    name: "statistRad",\n    id: "statistSupportedLanguagesRad",\n    value: "supportedLanguages",\n    lableName: "Supported Languages",\n    skipTd: false,\n    attributes: {\n      value: "supportedLanguages",\n      id: "supportedLanguages",\n      name: "statistRad"\n    }\n  });\n  const statistCategoriesRadObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    name: "statistRad",\n    id: "statistCategoriesRad",\n    value: "categories",\n    lableName: "Categories",\n    skipTd: false,\n    attributes: {\n      value: "categories",\n      id: "categoriesRad",\n      name: "statistRad"\n    }\n  });\n  const statistGenresRadObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    name: "statistRad",\n    id: "statistGenresRad",\n    value: "genres",\n    lableName: "Genres",\n    skipTd: false,\n    attributes: {\n      value: "genres",\n      id: "genres",\n      name: "statistRad"\n    }\n  });\n  const statistTagsRadObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    id: "statistTagsRad",\n    value: "tags",\n    lableName: "Tags",\n    skipTd: false,\n    attributes: {\n      value: "tags",\n      id: "tags",\n      name: "statistRad"\n    }\n  });\n  const statistObj = buildObjHelper({\n    tag: "button",\n    classArr: ["statistCriteriaBtn"],\n    id: "statistBtn",\n    innerHTML: "Statistics"\n  });\n  const statistIconObj = buildObjHelper({\n    tag: "i",\n    classArr: ["fa-solid", "fa-chart-simple"],\n    skipTd: true\n  });\n  const radioBtnDLCYStObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    id: "dlcYSt",\n    value: "Yes",\n    attributes: {\n      name: "includeDLCSt",\n      value: "Yes",\n      id: "dlcYSt",\n      checked: "checked"\n    }\n  });\n  const radioBtnDLCNStObj = buildObjHelper({\n    tag: "input",\n    inputType: "radio",\n    id: "dlcNSt",\n    value: "No",\n    attributes: {\n      name: "includeDLCSt",\n      value: "No",\n      id: "dlcNSt"\n    }\n  });\n  const statistCriteriaCreateArr = [[filterTitleObj], [[filterRatingObj, filterNumberObj], filterReleaseFromObj, filterReleaseToObj], [criteriaTitleObj], [[statistSupportedLanguagesRadObj, statistCategoriesRadObj, statistGenresRadObj, statistTagsRadObj]], [[radioBtnDLCYStObj, radioBtnDLCNStObj], [statistObj, statistIconObj]]];\n  const dataSet = await getData();\n  const navBtn = document.getElementById("navBtn");\n  const frontPageBtn = document.querySelector(".frontPageBtn");\n  const searchSearchArea = document.querySelector("#search-searchArea");\n  function populateFrontPageBtnArea(buildObj) {\n    const divBtnArea = buildElement(new scripts_buildObj("div", "btnArea"));\n    const spanBtnArea = buildElement(new scripts_buildObj("span", ["icon", "icon-circle"]));\n    const iBtnArea = buildElement(new scripts_buildObj("i", ["icon-1", "icon-1b"].concat(buildObj.classArr)));\n    const pBtnArea = buildElement(new scripts_buildObj("p", "text-6", null, null, buildObj.innerHTML));\n    const h6BtnArea = buildElement(new scripts_buildObj("h6", null, buildObj.name));\n    divBtnArea.addEventListener("click", () => {\n      document.getElementById(buildObj.id).scrollIntoView();\n    });\n    spanBtnArea.appendChild(iBtnArea);\n    divBtnArea.appendChild(spanBtnArea);\n    divBtnArea.appendChild(h6BtnArea);\n    divBtnArea.appendChild(pBtnArea);\n    frontPageBtn.appendChild(divBtnArea);\n  }\n  function populateFrontPageBtn() {\n    populateFrontPageBtnArea(searchBtnStrBuildObj);\n    populateFrontPageBtnArea(compareBtnStrBuildObj);\n    populateFrontPageBtnArea(statisticsBtnStrBuildObj);\n  }\n  function populateNavSubBtn(buildObj) {\n    const buttonNavSub = buildElement(new scripts_buildObj("button", "navSubBtn"));\n    const spanNavSub = buildElement(new scripts_buildObj("span", "text", buildObj.name));\n    const iNavSub = buildElement(new scripts_buildObj("i", buildObj.classArr));\n    buttonNavSub.addEventListener("click", () => {\n      document.getElementById(buildObj.id).scrollIntoView();\n    });\n    buttonNavSub.appendChild(iNavSub);\n    buttonNavSub.appendChild(spanNavSub);\n    navBtn.appendChild(buttonNavSub);\n  }\n  function populateNavBtn() {\n    populateNavSubBtn(homeBtnStrBuildObj);\n    populateNavSubBtn(searchBtnStrBuildObj);\n    populateNavSubBtn(compareBtnStrBuildObj);\n    populateNavSubBtn(statisticsBtnStrBuildObj);\n  }\n  function populateSearchPage(createStr) {\n    const tableSearchArea = buildElement(new scripts_buildObj("table", "user-input-table"));\n    createStr.forEach(row => {\n      let tr = createTableTr(row);\n      tableSearchArea.appendChild(tr);\n    });\n    searchSearchArea.appendChild(tableSearchArea);\n    let searchBtn = document.querySelector(".searchCriteriaBtn");\n    searchBtn.addEventListener("click", e => {\n      e.preventDefault();\n      searchData(dataSet);\n    });\n  }\n  function addDataForCreateSearchResultArr(headerTrCreateArr_i, data) {\n    const headerTrCreateArr_new = headerTrCreateArr_i.map(element => {\n      return {\n        ...element\n      };\n    });\n    headerTrCreateArr_new[0].value = data.name;\n    headerTrCreateArr_new[1].value = data.rating;\n    headerTrCreateArr_new[2].value = data.release_date;\n    headerTrCreateArr_new[3].value = stringCut(data.supported_languages);\n    headerTrCreateArr_new[4].value = stringCut(data.categories);\n    const headerTrSelectBtnObj_new = Object.assign({}, headerTrSelectBtnObj);\n    headerTrSelectBtnObj_new.attribute = data.name;\n    headerTrSelectBtnObj_new.onClick = function () {\n      displayDetial(data.name);\n    };\n    headerTrCreateArr_new.push(headerTrSelectBtnObj_new);\n    const headerTrAddToCompareBtnObj_new = Object.assign({}, headerTrAddToCompareBtnObj);\n    headerTrAddToCompareBtnObj_new.attribute = data.name;\n    headerTrAddToCompareBtnObj_new.onClick = function () {\n      addToCompare(data.name);\n    };\n    headerTrCreateArr_new.push(headerTrAddToCompareBtnObj_new);\n    return headerTrCreateArr_new;\n  }\n  function populateComparePage(createStr) {\n    const compareCriteriaArea = document.getElementById("compare-searchArea");\n    const tableCompareArea = buildElement(new scripts_buildObj("table"));\n    const compareCriteriaTr = buildElement(new scripts_buildObj("tr"));\n    const compareCriteriaTd = buildElement(new scripts_buildObj("td"));\n    const compareCriteriaTd2 = buildElement(new scripts_buildObj("td"));\n    const labelG1Obj = buildElement(buildObjHelper({\n      tag: "label",\n      innerHTML: "Game1",\n      lableName: "gameCompare1"\n    }));\n    const labelG2Obj = buildElement(buildObjHelper({\n      tag: "label",\n      innerHTML: "Game2",\n      lableName: "gameCompare2"\n    }));\n    const compareBtnObj = buildElement(buildObjHelper({\n      tag: "button",\n      id: "clearBtn",\n      innerHTML: "Clear"\n    }));\n    const compareBtn2Obj = buildElement(buildObjHelper({\n      tag: "button",\n      id: "clearBtn2",\n      innerHTML: "Clear"\n    }));\n    const compareNameInput = buildElement(compareNameObj);\n    const compareNameInput2 = buildElement(compareName2Obj);\n    compareBtnObj.onclick = function () {\n      compareNameInput.value = "";\n      if (compareCount > 0) compareCount -= 1;\n    };\n    compareBtn2Obj.onclick = function () {\n      compareNameInput2.value = "";\n      if (compareCount > 0) compareCount -= 1;\n    };\n    compareCriteriaTd.colSpan = 2;\n    compareCriteriaTd.appendChild(labelG1Obj);\n    compareCriteriaTd.appendChild(compareNameInput);\n    compareCriteriaTd.appendChild(compareBtnObj);\n    compareCriteriaTd2.colSpan = 2;\n    compareCriteriaTd2.appendChild(labelG2Obj);\n    compareCriteriaTd2.appendChild(compareNameInput2);\n    compareCriteriaTd2.appendChild(compareBtn2Obj);\n    compareCriteriaTr.appendChild(compareCriteriaTd);\n    compareCriteriaTr.appendChild(compareCriteriaTd2);\n    tableCompareArea.appendChild(compareCriteriaTr);\n    createStr.forEach(row => {\n      let tr = createTableTr(row);\n      tableCompareArea.appendChild(tr);\n    });\n    compareCriteriaArea.appendChild(tableCompareArea);\n    let compareBtn = document.querySelector(".compareCriteriaBtn");\n    compareBtn.addEventListener("click", e => {\n      e.preventDefault();\n      compareData(dataSet);\n    });\n    document.getElementById("compareMasterCheckbox").addEventListener("change", toggleCheckboxes);\n  }\n  function populateStatistPage(createStr) {\n    const statistCriteriaArea = document.getElementById("statist-searchArea");\n    const tableStatistArea = buildElement(new scripts_buildObj("table"));\n    createStr.forEach(row => {\n      let tr = createTableTr(row);\n      tableStatistArea.appendChild(tr);\n    });\n    statistCriteriaArea.appendChild(tableStatistArea);\n    let statistBtn = document.querySelector(".statistCriteriaBtn");\n    statistBtn.addEventListener("click", e => {\n      e.preventDefault();\n      statistData(dataSet);\n    });\n  }\n  function searchData(dataSet) {\n    const searchObj = searchObjArrHelper("search");\n    if (searchObj.checkOnlyOneCriteria("search", 0)) {\n      openModal("At least choose one Criteria");\n      return;\n    }\n    if (!searchVaildation(searchObj)) return;else {\n      const filteredData = filterData(searchObj, dataSet);\n      // console.log(filteredData);\n      displaySeachResult(filteredData);\n    }\n  }\n  function compareData(dataSet) {\n    const searchObj = searchObjArrHelper("compare");\n    if (!searchObj.gameCompare1 || !gameCompare2) {\n      const answer = window.confirm("Must select 2 games, go select now?");\n      if (answer) {\n        const searchPage = document.getElementById("searchPage");\n        searchPage.scrollIntoView();\n      }\n      return;\n    }\n    if (searchObj.checkOnlyOneCriteria("compare", 0)) {\n      openModal("At least choose one Criteria");\n      return;\n    }\n    if (searchObj.radioBtn === "Chart" && !searchObj.areOnlyFiveFieldsChecked()) {\n      openModal("Display By Chart only support the criteria with (C)");\n      return;\n    }\n    const gameData1 = dataSet[searchObj.gameCompare1];\n    const gameData2 = dataSet[searchObj.gameCompare2];\n    const propertyList = searchObj.getCheckedPropertiesArray("compare");\n    const compareResultP = document.getElementById("compareResultP");\n    const compareResult = document.getElementById("compareResult");\n    const chartArea = document.getElementById("chartArea");\n    compareResultP.innerHTML = "";\n    compareResult.innerHTML = "";\n    chartArea.innerHTML = "";\n    if (searchObj.radioBtn === "Table") compareDisplayByTable(propertyList, gameData1, gameData2);else compareDisplayByChart(propertyList, gameData1, gameData2);\n  }\n  function statistData(dataSet) {\n    const searchObj = searchObjArrHelper("statist");\n    if (!searchVaildation(searchObj)) return;\n    if (searchObj.checkOnlyOneCriteria("statist", 0)) {\n      openModal("At least choose one Criteria");\n      return;\n    }\n    const criteria = searchObj.getSelectedRadio();\n    const statistResultP = document.getElementById("statistResultP");\n    const chartArea = document.getElementById("statist-chartArea");\n    statistResultP.innerHTML = "";\n    chartArea.innerHTML = "";\n    appendCanvas([criteria], "statist");\n    const ctx = document.getElementById(\'statist-canvas0\');\n    const filteredData = filterData(searchObj, dataSet);\n    const criteriaDataHash = rebuildHash(getCriteriaDataHash(filteredData, criteria));\n    // console.log(filteredData);\n\n    let chartType = "doughnut";\n    // if (criteria === "tags")\n    //     chartType = "bar";\n    const createHash = {\n      ctx: ctx,\n      type: chartType,\n      compareCol: criteria,\n      displayLable: criteria,\n      dataHash: criteriaDataHash,\n      backgroundColor: \'white\',\n      borderColor: \'red\'\n    };\n    const chartObj = chartObjHelper(createHash);\n    buildStatistChart(chartObj);\n  }\n  function getCriteriaDataHash(filteredData, property) {\n    const criteriaDataHash = {};\n    filteredData.forEach(data => {\n      const criteriaData = dataTranArray(data[property]);\n      if (criteriaData) {\n        criteriaData.forEach(el => {\n          if (!criteriaDataHash[el]) criteriaDataHash[el] = 0;\n          criteriaDataHash[el] += 1;\n        });\n      }\n    });\n    return criteriaDataHash;\n  }\n  function compareDisplayByTable(propertyList, gameData1, gameData2) {\n    const compareResult = document.getElementById("compareResult");\n    const compareResultTable = buildElement(new scripts_buildObj("table"));\n    const compareResultTr = buildElement(new scripts_buildObj("tr"));\n    const compareResultEmptyTh = buildElement(new scripts_buildObj("th"));\n    const compareResultTh = buildElement(new scripts_buildObj("th"));\n    const compareResultTh2 = buildElement(new scripts_buildObj("th"));\n    const game1Th = buildElement(buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: gameData1.name,\n      readonly: true\n    }));\n    const game2Th = buildElement(buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: gameData2.name,\n      readonly: true\n    }));\n    compareResultTh.appendChild(game1Th);\n    compareResultTh2.appendChild(game2Th);\n    compareResultTr.appendChild(compareResultEmptyTh);\n    compareResultTr.appendChild(compareResultTh);\n    compareResultTr.appendChild(compareResultTh2);\n    compareResultTable.appendChild(compareResultTr);\n    propertyList.forEach(property => {\n      const trObj = buildElement(new scripts_buildObj("tr"));\n      let classArr = [];\n      let input = "input";\n      let gameData1Value = gameData1[property];\n      let gameData2Value = gameData2[property];\n      if (property === "categories" || property === "tags" || property === "genres" || property === "supported_languages") {\n        classArr = ["compareCol-500"];\n        input = "textarea";\n        gameData1Value = stringCut(gameData1[property]);\n        gameData2Value = stringCut(gameData2[property]);\n      }\n      const labelObj = createTableTd(buildObjHelper({\n        tag: "label",\n        lableName: stringTran(property)\n      }));\n      const game1Obj = createTableTd(buildObjHelper({\n        tag: input,\n        classArr: classArr,\n        inputType: "text",\n        value: gameData1Value,\n        readonly: true\n      }));\n      const game2Obj = createTableTd(buildObjHelper({\n        tag: input,\n        classArr: classArr,\n        inputType: "text",\n        value: gameData2Value,\n        readonly: true\n      }));\n      labelObj.forEach(obj => trObj.appendChild(obj));\n      game1Obj.forEach(obj => trObj.appendChild(obj));\n      game2Obj.forEach(obj => trObj.appendChild(obj));\n      compareResultTable.appendChild(trObj);\n    });\n    compareResult.appendChild(compareResultTable);\n  }\n  function compareDisplayByChart(propertyList, gameData1, gameData2) {\n    appendCanvas(propertyList, "compare");\n    let i = 0;\n    propertyList.forEach(property => {\n      const ctx = document.getElementById(`compare-canvas${i}`);\n      const createHash = {\n        ctx: ctx,\n        type: "bar",\n        compareCol: property,\n        displayLable: property,\n        game1Data: gameData1,\n        game2Data: gameData2,\n        beginAtZero: false\n      };\n      const chartObj = chartObjHelper(createHash);\n      buildCompareChart(chartObj, i);\n      i++;\n    });\n  }\n  function filterData(criteria, dataSet) {\n    let releaseFrom, releaseTo, operator, rating;\n    const filteredData = Object.values(dataSet).filter(item => {\n      if (criteria.source === "search") {\n        releaseFrom = Date.parse(criteria.releaseFrom);\n        releaseTo = Date.parse(criteria.releaseTo);\n        operator = criteria.operator;\n        rating = criteria.rating;\n      } else if (criteria.source === "statist") {\n        releaseFrom = Date.parse(criteria.filterReleaseFrom);\n        releaseTo = Date.parse(criteria.filterReleaseTo);\n        operator = criteria.filterOperator;\n        rating = criteria.filterRating;\n      }\n      const gameReleaseDate = Date.parse(item.release_date);\n      const languagesHash = hashHelper(languagesKey, languagesValue);\n      const categoriesHash = hashHelper(categoriesKey, categoriesValue);\n      if ((!criteria.gameName || item.name.toLowerCase().includes(criteria.gameName.toLowerCase())) && (!releaseFrom || gameReleaseDate >= releaseFrom) && (!releaseTo || gameReleaseDate <= releaseTo) && (!operator || operator === "greaterEqual" && item.rating >= rating || operator === "greater" && item.rating > rating || operator === "smaller" && item.rating < rating) && (criteria.radioBtnDlc !== "No" || item.type === \'game\') && (!criteria.languages || criteria.languages.length === 0 || item.supported_languages && dataTranArray(item.supported_languages).some(sub => languagesHash[criteria.languages].includes(sub))) && (!criteria.categories || criteria.categories.length === 0 || item.categories && dataTranArray(item.categories).some(sub => categoriesHash[criteria.categories].includes(sub)))) {\n        return true;\n      }\n      return false;\n    });\n    switch (criteria.orderBy) {\n      case "ratingDesc":\n        filteredData.sort((a, b) => b.rating - a.rating);\n        break;\n      case "ratingAsc":\n        filteredData.sort((a, b) => a.rating - b.rating);\n        break;\n      case "nameDesc":\n        filteredData.sort((a, b) => b.name.localeCompare(a.name));\n        break;\n      case "nameAsc":\n        filteredData.sort((a, b) => a.name.localeCompare(b.name));\n        break;\n      case "releaseDateDesc":\n        filteredData.sort((a, b) => Date.parse(b.release_date) - Date.parse(a.release_date));\n        break;\n      case "releaseDateAsc":\n        filteredData.sort((a, b) => Date.parse(a.release_date) - Date.parse(b.release_date));\n        break;\n    }\n    if (criteria.source === "search") {\n      const limitedData = filteredData.slice(0, 100);\n      return limitedData;\n    } else return filteredData;\n  }\n  function displaySeachResult(filteredData) {\n    const searchResultP = document.getElementById("searchResultP");\n    const searchResultList = document.getElementById("searchResultList");\n    searchResultList.innerHTML = "";\n    if (filteredData.length === 0) searchResultP.innerHTML = "No result";else {\n      searchResultP.innerHTML = "";\n      const tableSearchResult = buildElement(new scripts_buildObj("table"));\n      const headerTrSearchResult = createTableTr(headerTrCreateArr);\n      tableSearchResult.appendChild(headerTrSearchResult);\n      filteredData.forEach(data => {\n        let headerTrCreateArrWithData = addDataForCreateSearchResultArr(headerTrCreateArr, data);\n        const trSearchResult = createTableTr(headerTrCreateArrWithData);\n        tableSearchResult.appendChild(trSearchResult);\n      });\n      searchResultList.appendChild(tableSearchResult);\n      if (filteredData.length === 1) {\n        displayDetial(filteredData[0].name);\n      }\n    }\n  }\n  function displayDetial(name) {\n    let game = dataSet[name];\n    //  console.log(game);\n    const detialPage = document.getElementById("detialPage");\n    const nameObj = buildObjHelper({\n      tag: "input",\n      classArr: ["detialCol-1000"],\n      inputType: "text",\n      value: game.name,\n      readonly: "true",\n      lableName: "Name:",\n      colSpan: "4"\n    });\n    const headerImageObj = buildObjHelper({\n      tag: "img",\n      classArr: ["headerImage"],\n      src: game["Header image"]\n    });\n    const noImageObj = buildObjHelper({\n      tag: "input",\n      classArr: ["h1"],\n      value: "No Image"\n    });\n    const releaseDateObj = buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: game.release_date,\n      readonly: "true",\n      lableName: "Release Date:"\n    });\n    const ratingObj = buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: game.rating,\n      readonly: "true",\n      lableName: "Rating:"\n    });\n    const languagesObj = buildObjHelper({\n      tag: "textarea",\n      classArr: ["detialCol-1000"],\n      inputType: "text",\n      value: stringCut(game.supported_languages),\n      readonly: "true",\n      lableName: "Supported Languages:",\n      colSpan: "4"\n    });\n    const achievementsObj = buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: game.achievements,\n      readonly: "true",\n      lableName: "Achievements:"\n    });\n    const genresObj = buildObjHelper({\n      tag: "textarea",\n      classArr: ["detialCol-1000"],\n      inputType: "text",\n      value: stringCut(game.genres),\n      readonly: "true",\n      lableName: "Genres:",\n      colSpan: "4"\n    });\n    const ownersObj = buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: game.owners,\n      readonly: "true",\n      lableName: "Owners:"\n    });\n    const tagsObj = buildObjHelper({\n      tag: "textarea",\n      classArr: ["detialCol-1000"],\n      inputType: "text",\n      value: stringCut(game.tags),\n      readonly: "true",\n      lableName: "Tags:",\n      colSpan: "4"\n    });\n    const platformsObj = buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: stringCut(game.platforms),\n      readonly: "true",\n      lableName: "Platforms:",\n      colSpan: "4"\n    });\n    const priceObj = buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: game.price,\n      readonly: "true",\n      lableName: "Price (USD):"\n    });\n    const categoriesObj = buildObjHelper({\n      tag: "textarea",\n      classArr: ["detialCol-1000"],\n      inputType: "text",\n      value: stringCut(game.categories),\n      readonly: "true",\n      lableName: "Categories:",\n      colSpan: "4"\n    });\n    const totalNegativeObj = buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: game.total_negative,\n      lableName: "Total Negative:",\n      readonly: "true"\n    });\n    const totalPositiveObj = buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: game.total_positive,\n      lableName: "Total Positive:",\n      readonly: "true"\n    });\n    const reviewScoreObj = buildObjHelper({\n      tag: "input",\n      inputType: "text",\n      value: game.review_score,\n      lableName: "Review Score:",\n      readonly: "true"\n    });\n    const detailAddToCompareBtnObj = buildObjHelper({\n      tag: "button",\n      classArr: ["detailBtn"],\n      innerHTML: "Add To Compare"\n    });\n    const detailAddToCompareBtnIconObj = buildObjHelper({\n      tag: "i",\n      classArr: ["fa-solid", "fa-table"]\n    });\n    const detialCreateArr = [[nameObj], [releaseDateObj, ownersObj], [ratingObj, priceObj], [platformsObj], [categoriesObj], [totalPositiveObj, totalNegativeObj], [languagesObj], [reviewScoreObj, achievementsObj], [genresObj], [tagsObj]];\n    detialPage.innerHTML = "";\n    if (game["Header image"]) {\n      let headerImage = buildElement(headerImageObj);\n      detialPage.append(headerImage);\n    } else {\n      let noImage = buildElement(noImageObj);\n      detialPage.append(noImage);\n    }\n    let imageAndBtnContainer = document.createElement("div");\n    imageAndBtnContainer.style.display = "flex";\n    let detailAddToCompareBtn = buildElement(detailAddToCompareBtnObj);\n    detailAddToCompareBtn.onclick = function () {\n      addToCompare(name);\n    };\n    let detailAddToCompareBtnIcon = buildElement(detailAddToCompareBtnIconObj);\n    detailAddToCompareBtn.appendChild(detailAddToCompareBtnIcon);\n    imageAndBtnContainer.appendChild(detailAddToCompareBtn);\n    detialPage.appendChild(imageAndBtnContainer);\n    const detialTable = buildElement(new scripts_buildObj("table"));\n    detialCreateArr.forEach(row => {\n      let tr = createTableTr(row);\n      detialTable.appendChild(tr);\n    });\n    detialPage.appendChild(detialTable);\n    detialPage.scrollIntoView();\n  }\n  populateFrontPageBtn();\n  populateNavBtn();\n  populateSearchPage(searchCriteriaCreateArr);\n  populateComparePage(compareCriteriaCreateArr);\n  populateStatistPage(statistCriteriaCreateArr);\n});\nfunction searchVaildation(searchObj) {\n  let releaseFrom, releaseTo, operator, rating;\n  if (searchObj.source === "search") {\n    releaseFrom = Date.parse(searchObj.releaseFrom);\n    releaseTo = Date.parse(searchObj.releaseTo);\n    operator = searchObj.operator;\n    rating = searchObj.rating;\n  } else if (searchObj.source === "statist") {\n    releaseFrom = Date.parse(searchObj.filterReleaseFrom);\n    releaseTo = Date.parse(searchObj.filterReleaseTo);\n    operator = searchObj.filterOperator;\n    rating = searchObj.filterRating;\n  }\n  if (releaseFrom && releaseTo) {\n    if (releaseTo < releaseFrom) {\n      openModal(\'Release To must later than Release From\');\n      return false;\n    }\n  }\n  if (operator && !rating || !operator && rating) {\n    openModal(\'Missing Operator or Rating\');\n    return false;\n  }\n  return true;\n}\nlet compareCount = 0;\nfunction addToCompare(name) {\n  const gameCompare1 = document.getElementById("gameCompare1");\n  const gameCompare2 = document.getElementById("gameCompare2");\n  const comparePage = document.getElementById("comparePage");\n  if (gameCompare1.value === name || gameCompare2.value === name) {\n    openModal("This game alreadly added");\n    return;\n  }\n  if (!gameCompare1.value) {\n    gameCompare1.value = name;\n    compareCount += 1;\n    if (compareCount === 1) openModal("add success, you can add 1 more game for compare");else if (compareCount === 2) {\n      const answer = window.confirm("add success, do you compare now?");\n      if (answer) comparePage.scrollIntoView();\n    }\n  } else if (!gameCompare2.value) {\n    gameCompare2.value = name;\n    compareCount += 1;\n    const answer = window.confirm("add success, do you compare now?");\n    if (answer) comparePage.scrollIntoView();\n  } else alert("Only can compare between 2 game ");\n}\nfunction appendCanvas(propertyList, type) {\n  let ctx;\n  if (type === "compare") ctx = document.getElementById(\'chartArea\');else if (type === "statist") ctx = document.getElementById(\'statist-chartArea\');\n  ctx.innerHTML = "";\n  for (let i = 0; i < propertyList.length; i++) {\n    let canvasId = `${type}-canvas${i}`;\n    const canvas = buildElement(buildObjHelper({\n      tag: "canvas",\n      id: canvasId,\n      classArr: ["canvasClass"]\n    }));\n    ctx.appendChild(canvas);\n  }\n}\nfunction toggleCheckboxes() {\n  const masterCheckbox = document.getElementById("compareMasterCheckbox");\n  const masterCheckboxLabel = document.getElementById("compareMasterCheckboxLabel");\n  const compareCheckboxes = document.getElementsByClassName("compareChbClass");\n  const displayText = masterCheckbox.checked ? "Uncheck All" : "Check All";\n  for (let i = 0; i < compareCheckboxes.length; i++) {\n    compareCheckboxes[i].checked = masterCheckbox.checked;\n  }\n  masterCheckboxLabel.innerHTML = displayText;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///499\n')},37:function(){eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGVhbV9nYW1lc19zdGF0aXN0aWNzLy4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n")}};__webpack_modules__[499]();var __webpack_exports__={};__webpack_modules__[37]()})();